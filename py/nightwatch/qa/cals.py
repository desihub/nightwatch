from .base import QA
from glob import glob
import os
import collections

import numpy as np
import fitsio
import json

from astropy.table import Table

from ..calibrations import pick_calib_file, get_calibrations


class QACalibArcs(QA):
    """Class representing arc lamp QA, tracking identified bright lines.
    
    Methods:
        valid_obstype(self, obstype): Given the obstype of an exposure, returns whether QACalibArcs is a valid QA metric. QACalibArcs is currently valid for all exposures.
        run(self, indir): Given path to directory containing qproc logfiles + errorcodes.txt file, returns Astropy table with QPROCStatus data.
    """
    
    def __init__(self):
        self.output_type = 'PER_SPECTRO'
    
    def valid_obstype(self, obstype):
        """Obstype must be an ARC exposure.
        """
        return obstype.upper() == 'ARC'
    
    def run(self, indir):
        """Loop through ARC qframes and identify the pseudo-equivalent widths of
        prominent lines.
        """

        """Generates QA data for qproc logfiles; tracks which cameras exited with a nonzero exit code. Reads in data from
        errorcodes.txt file generated by nightwatch qproc.
        Returns Table object with columns:
    
        NIGHT   EXPID   CAM  SPECTRO   QPROC_EXIT 
                                       exitcode in this column
        """
        # get night, expid data
        qframes = sorted(glob(os.path.join(indir, 'qframe-*.fits')))
        hdr = fitsio.read_header(qframes[0], ext='FIBERMAP')
        night = hdr['NIGHT']
        expid = hdr['EXPID']
        program = hdr['PROGRAM']

        # get arc line calibration data. 
        calibfile = pick_calib_file('CALIB-ARCS', night)
        cals = get_calibrations(calibfile, program)
        settings = cals['peqw']['spectrograph']['settings']

        fiberlo = settings['fiberlo']
        fiberhi = settings['fiberhi']
        npix = settings['npix']

        wavelengths = cals['wavelength']
        labels = [f'{cam}{wl:g}' for cam in 'BRZ' for wl in wavelengths[cam]]

        results = []
        for qframe in qframes:
            dico = dict()
            filename = os.path.basename(qframe)
            spectro = int(filename[8])
            cam = filename[7].upper()

            dico['NIGHT'] = night
            dico['EXPID'] = expid
            dico['SPECTRO'] = spectro
            dico['CAM'] = cam

            # Extract flux for the central 20 fibers in the CCD.
            fits = fitsio.FITS(qframe)
            wave = np.median(fits['WAVELENGTH'][fiberlo:fiberhi, :], axis=0)
            flux = np.median(fits['FLUX'][fiberlo:fiberhi, :], axis=0)

            # Loop through standard lines for this camera and program.
            for label in labels:
                if label[0] == cam:
                    # pEQW: compute the flux integral in a small window around
                    # the line's central wavelength.
                    arcline = float(label[1:])
                    pk = np.argmin(np.abs(wave - arcline))
                    i = np.maximum(pk-npix, 0)
                    j = np.minimum(pk+npix, len(wave)-1)
                    peqw = np.trapz(flux[i:j], wave[i:j])
                    dico[label] = peqw
                else:
                    dico[label] = -1

            results.append(collections.OrderedDict(**dico))

        return Table(results, names=results[0].keys())

